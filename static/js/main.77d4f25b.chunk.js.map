{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","key","setKey","inputValue","setInputValue","useEffect","handleKeyUp","event","document","addEventListener","removeEventListener","className","type","value","onChange","target","ReactDOM","render","getElementById"],"mappings":"wMAEaA,EAAgB,WAC3B,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACR,IAAMC,EAAc,SAACC,GACnBL,EAAOK,EAAMN,MAKf,OAFAO,SAASC,iBAAiB,QAASH,GAE5B,WACLE,SAASE,oBAAoB,QAASJ,MAEvC,IAMH,OACE,sBAAKK,UAAU,MAAf,UAGE,uBACEC,KAAK,OACLC,MAAOV,EACPW,SAXe,SAACP,GACpBH,EAAcG,EAAMQ,OAAOF,UAazB,mBAAGF,UAAU,eAAb,SACIV,EAAD,mCAE+BA,EAF/B,KACG,gC,MC7BZe,IAASC,OACP,cAAC,EAAD,IACAT,SAASU,eAAe,W","file":"static/js/main.77d4f25b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport const App: React.FC = () => {\n  const [key, setKey] = useState('');\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    const handleKeyUp = (event: KeyboardEvent) => {\n      setKey(event.key);\n    };\n\n    document.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n\n      {/* Keep this input for tests */}\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n      />\n\n      <p className=\"App__message\">\n        {!key\n          ? 'Nothing was pressed yet'\n          : `The last pressed key is [${key}]`}\n      </p>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}